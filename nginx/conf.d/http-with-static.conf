# Scholarport Backend - HTTP Configuration with Static Files
# This config serves static files and is ready for SSL upgrade

server {
    listen 80;
    server_name 43.205.95.162 ec2-43-205-95-162.ap-south-1.compute.amazonaws.com;

    client_max_body_size 50M;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Logging
    access_log /var/log/nginx/scholarport_access.log;
    error_log /var/log/nginx/scholarport_error.log;

    # Static files for Django Admin (CSS, JS, images)
    location /static/ {
        alias /app/staticfiles/;
        expires 30d;
        add_header Cache-Control "public, immutable";
        try_files $uri $uri/ =404;
    }

    # Media files (user uploads)
    location /media/ {
        alias /app/media/;
        expires 7d;
        add_header Cache-Control "public";
    }    # Favicon
    location = /favicon.ico {
        alias /app/staticfiles/favicon.ico;
        access_log off;
        log_not_found off;
    }

    # Robots.txt
    location = /robots.txt {
        alias /app/staticfiles/robots.txt;
        access_log off;
        log_not_found off;
    }

    # API and application routes
    location / {
        # CORS is handled by Django backend - do not add headers here to avoid duplicates

        # Proxy settings
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;

        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # WebSocket support (if needed in future)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;

        # Buffering
        proxy_buffering off;
        proxy_request_buffering off;
    }
}

# HTTPS configuration (commented out - enable after SSL setup)
# Uncomment and configure after running certbot
#
# server {
#     listen 443 ssl;
#     http2 on;
#     server_name 43.205.95.162 ec2-43-205-95-162.ap-south-1.compute.amazonaws.com;
#
#     # SSL certificates (Let's Encrypt)
#     ssl_certificate /etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem;
#
#     # SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#
#     # HSTS (optional - uncomment after testing)
#     # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     client_max_body_size 50M;
#
#     # Security headers
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#
#     # Static files
#     location /static/ {
#         alias /app/staticfiles/;
#         expires 30d;
#         add_header Cache-Control "public, immutable";
#         add_header 'Access-Control-Allow-Origin' '*' always;
#     }
#
#     location /media/ {
#         alias /app/media/;
#         expires 7d;
#         add_header Cache-Control "public";
#         add_header 'Access-Control-Allow-Origin' '*' always;
#     }
#
#     # API and application routes (same as HTTP config above)
#     location / {
#         if ($request_method = 'OPTIONS') {
#             add_header 'Access-Control-Allow-Origin' '$http_origin' always;
#             add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
#             add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, X-CSRFToken, X-Requested-With' always;
#             add_header 'Access-Control-Allow-Credentials' 'true' always;
#             add_header 'Access-Control-Max-Age' 1728000;
#             add_header 'Content-Type' 'text/plain; charset=utf-8';
#             add_header 'Content-Length' 0;
#             return 204;
#         }
#
#         add_header 'Access-Control-Allow-Origin' '$http_origin' always;
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
#         add_header 'Access-Control-Allow-Headers' 'Accept, Authorization, Content-Type, X-CSRFToken, X-Requested-With' always;
#         add_header 'Access-Control-Allow-Credentials' 'true' always;
#
#         proxy_pass http://backend:8000;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header X-Forwarded-Host $server_name;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#         proxy_connect_timeout 600s;
#         proxy_send_timeout 600s;
#         proxy_read_timeout 600s;
#         proxy_buffering off;
#         proxy_request_buffering off;
#     }
# }
#
# # Redirect HTTP to HTTPS (enable after SSL setup)
# # server {
# #     listen 80;
# #     server_name 43.205.95.162 ec2-43-205-95-162.ap-south-1.compute.amazonaws.com;
# #     return 301 https://$server_name$request_uri;
# # }
